#include <stdint.h>

#include <iostream>
#include <iterator>
#include <vector>

#define ABCDEFGJHABCDEFGHJACBDEFGGJ 0
#define ABCDEFGHJABCDEFHGJACBDEFGGJ 1
#define ABCDFFGHJABCDEFHGJACBDEFGGJ static_cast
#define ABCDFFGHJABCDFFHGJACBDEFGGJ for
#define ABCDFFGHJABCDFFHGJACBDFFGGJ while
#define ABCDFFGHJABDCFFHGJACBDFFGGJ if
#define ABCDFFGHJADDCFFHGJACBDFFGGJ double
#define ABCDEFGJHABCDEFGHJACBDEFGHJ 0
#define ABCDEFGHJABCDEFHGJACBDEFGHJ 1
#define ABCDFFGHJABCDEFHGJACBDEFGHJ static_cast
#define ABCDFFGHJABCDFFHGJACBDEFGHJ for
#define ABCDFFGHJABCDFFHGJACBDFFGHJ while
#define ABCDFFGHJABDCFFHGJACBDFFGHJ if
#define ABCDFFGHJADDCFFHGJACBDFFGHJ double
#define ABCDEFGJHABCDEFGHJACBDEFGJJ 0
#define ABCDEFGHJABCDEFHGJACBDEFGJJ 1
#define ABCDFFGHJABCDEFHGJACBDEFGJJ static_cast
#define ABCDFFGHJABCDFFHGJACBDEFGJJ for
#define ABCDFFGHJABCDFFHGJACBDFFGJJ while
#define ABCDFFGHJABDCFFHGJACBDFFGJJ if
#define ABCDFFGHJADDCFFHGJACBDFFGJJ double
#define ABCDEFGJHABCDEFGHJACBDEFGFJ 0
#define ABCDEFGHJABCDEFHGJACBDEFGFJ 1
#define ABCDFFGHJABCDEFHGJACBDEFGFJ static_cast
#define ABCDFFGHJABCDFFHGJACBDEFGFJ for
#define ABCDFFGHJABCDFFHGJACBDFFGFJ while
#define ABCDFFGHJABDCFFHGJACBDFFGFJ if
#define ABCDFFGHJADDCFFHGJACBDFFGFJ double
#define ABCDFFGHHADDCFFHGJACBDFFGFJ 1.23456789

template<class ABCDEGFHJABDCEFGHJABCDEFGHJ, class ABCDEGFHJABDCEFGHJABCEDFGHJ>void WTFSort(ABCDEGFHJABDCEFGHJABCDEFGHJ* ABCDEFGHJABCDEFGHJACBDEFGHJ, ABCDEGFHJABDCEFGHJABCEDFGHJ ABCDEFGHJABDCEFGHJABCDEFGHJ) { ABCDEGFHJABDCEFGHJABCEDFGHJ ABCDEFGHJABCDEFGHJABCDEFGHJ = ABCDEFGHJABDCEFGHJABCDEFGHJ; ABCDEGFHJABDCEFGHJABCEDFGHJ ABCDEFGHJABCDFEGHJABCDEFGHJ = ABCDEFGJHABCDEFGHJACBDEFGHJ; ABCDEGFHJABDCEFGHJABCEDFGHJ ABCDEFGHJABCDEFGHJACDBEFGHJ = ABCDEFGHJABCDFEGHJABCDEFGHJ; ABCDEGFHJABDCEFGHJABCDEFGHJ ABCDEFGHJABCDEFGHJACDEBFGHJ; ABCDEGFHJABDCEFGHJABCDEFGHJ ABCDEFGHJAACDFEGHJABCDEFGHJ = ABCDEFGHJABCDEFHGJACBDEFGHJ; ABCDFFGHJABCDFFHGJACBDFFGHJ ((ABCDEFGHJABCDEFGHJABCDEFGHJ > ABCDEFGHJABCDEFHGJACBDEFGHJ) || ABCDEFGHJABCDFEGHJABCDEFGHJ == ABCDEFGHJABCDEFHGJACBDEFGHJ) { ABCDFFGHJABDCFFHGJACBDFFGHJ (ABCDEFGHJABCDEFGHJABCDEFGHJ > ABCDEFGHJABCDEFHGJACBDEFGHJ) { ABCDEFGHJABCDEFGHJABCDEFGHJ = ABCDFFGHJABCDEFHGJACBDEFGHJ<ABCDEGFHJABDCEFGHJABCEDFGHJ>(ABCDFFGHJABCDEFHGJACBDEFGHJ<ABCDFFGHJADDCFFHGJACBDFFGHJ>(ABCDEFGHJABCDEFGHJABCDEFGHJ) / ABCDFFGHHADDCFFHGJACBDFFGFJ); } ABCDEFGHJAACDFEGHJABCDEFGHJ += ABCDEFGHJAACDFEGHJABCDEFGHJ; ABCDEFGHJABCDFEGHJABCDEFGHJ = ABCDEFGJHABCDEFGHJACBDEFGHJ; ABCDFFGHJABCDFFHGJACBDEFGHJ (ABCDEFGHJABCDEFGHJACDBEFGHJ = ABCDEFGJHABCDEFGHJACBDEFGHJ; ABCDEFGHJABCDEFGHJABCDEFGHJ + ABCDEFGHJABCDEFGHJACDBEFGHJ < ABCDEFGHJABDCEFGHJABCDEFGHJ; ABCDEFGHJABCDEFGHJACDBEFGHJ += ABCDEFGHJABCDEFHGJACBDEFGHJ) { ABCDFFGHJABDCFFHGJACBDFFGHJ (ABCDEFGHJABCDEFGHJACBDEFGHJ[ABCDEFGHJABCDEFGHJACDBEFGHJ] - ABCDEFGHJABCDEFGHJACBDEFGHJ[ABCDEFGHJABCDEFGHJACDBEFGHJ + ABCDEFGHJABCDEFGHJABCDEFGHJ] > ABCDEFGJHABCDEFGHJACBDEFGHJ) {ABCDEFGHJAACDFEGHJABCDEFGHJ += ABCDEFGHJABCDEFHGJACBDEFGHJ; ABCDEFGHJABCDEFGHJACDEBFGHJ = *(ABCDEFGHJABCDEFGHJACBDEFGHJ + ABCDEFGHJABCDEFGHJACDBEFGHJ);*(ABCDEFGHJABCDEFGHJACBDEFGHJ + ABCDEFGHJABCDEFGHJACDBEFGHJ) = *(ABCDEFGHJABCDEFGHJACBDEFGHJ + ABCDEFGHJABCDEFGHJACDBEFGHJ + ABCDEFGHJABCDEFGHJABCDEFGHJ);*(ABCDEFGHJABCDEFGHJACBDEFGHJ + ABCDEFGHJABCDEFGHJACDBEFGHJ + ABCDEFGHJABCDEFGHJABCDEFGHJ) = ABCDEFGHJABCDEFGHJACDEBFGHJ;ABCDEFGHJABCDFEGHJABCDEFGHJ = ABCDEFGHJABCDEFHGJACBDEFGHJ;}}ABCDFFGHJABDCFFHGJACBDFFGHJ (ABCDEFGHJAACDFEGHJABCDEFGHJ == ABCDEFGHJABCDEFHGJACBDEFGHJ) {ABCDEFGHJAACDFEGHJABCDEFGHJ += ABCDEFGHJABCDEFHGJACBDEFGHJ;}}ABCDEFGHJABCDEFGHJABCDEFGHJ = ABCDEFGHJABDCEFGHJABCDEFGHJ;ABCDEFGHJABCDFEGHJABCDEFGHJ = ABCDEFGJHABCDEFGHJACBDEFGHJ;ABCDEFGHJABCDEFGHJACDBEFGHJ = ABCDEFGHJABCDFEGHJABCDEFGHJ;ABCDEFGHJAACDFEGHJABCDEFGHJ = ABCDEFGHJABCDEFHGJACBDEFGHJ;}

int main() {
  std::vector<int> numbers;
  std::copy(std::istream_iterator<int>(std::cin), std::istream_iterator<int>(), std::back_inserter(numbers));

  WTFSort(&numbers[0], numbers.size());

  for (size_t i = 0; i < numbers.size(); i++) {
    std::cout << numbers[i] << " ";
  }
  std::cout << std::endl;

  return 0;
}
